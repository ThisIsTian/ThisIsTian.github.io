<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Titan de Tian</title>
    <link>https://ThisIsTian.github.io/</link>
    <description>Recent content on Titan de Tian</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>xtiant1@gmail.com (Tiantian Xie)</managingEditor>
    <webMaster>xtiant1@gmail.com (Tiantian Xie)</webMaster>
    <lastBuildDate>Wed, 06 May 2020 08:45:22 -0800</lastBuildDate>
    
	<atom:link href="https://ThisIsTian.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Real-time subsurface scattering with single pass variance-guided adaptive importance sampling</title>
      <link>https://ThisIsTian.github.io/publication/real-time-subsurface-with-adaptive-sampling/</link>
      <pubDate>Wed, 06 May 2020 08:45:22 -0800</pubDate>
      <author>xtiant1@gmail.com (Tiantian Xie)</author>
      <guid>https://ThisIsTian.github.io/publication/real-time-subsurface-with-adaptive-sampling/</guid>
      <description>&lt;div class=&#34;publication-preview-teaser&#34;&gt;
&lt;image src=&#34;../../Image/publication/i3d2020/subsurfaceteaser.png&#34;&gt;&lt;/image&gt;
&lt;div class=&#34;teaser-caption&#34;&gt;
Figure 1: Subsurface rendering comparison from close to far at 1920x1080 on NVIDIA Quadro P4000 (implemented in UE4). (a) our adaptive sampling algorithm ($σ\\_0^2$ = 0.001, κ = 0.2, $b\\_{min}$ = 8 spp, $b\\_{max}$ = 64 spp), (b) Golubev [2018]’s sampling model in our framework with 64spp, (c) a Baseline fixed 64-sample implementation without our proposed acceleration techniques, (d) Separable screen-space diffusion. (e) Visualization of our adaptive sample count for each view. Our quality is higher than Baseline in all three scenarios (close skin patch, ear, and front). Moreover, our algorithm runs faster on the close skin patch with an acceleration of up to 91.07× (2.78 ms vs 253.18 ms). In addition, our algorithm enables better quality with run time comparable or even better than Separable. Error measurements are PSNR for the subsurface, as compared to a reference image at 2k samples per pixel. Digital Mike ©Epic Games, Inc.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;p style=&#34;text-align: justify; word-wrap: break-word; font-size:14px&#34;&gt;
&lt;em&gt;Abstract&lt;/em&gt;: In real-time applications, it is difficult to simulate realistic subsurface scattering with differing degrees
translucency. Burley’s reflectance approximation by empirically fitting the diffusion profile as a whole makes
it possible to achieve realistic looking subsurface scattering for different translucent materials in screen
space. However, achieving a physically correct result requires real-time Monte Carlo sampling of the analytic
importance function per pixel per frame, which seems prohibitive to achieve. In this paper, we propose an
approximation of the importance function that can be evaluated in real-time. Since subsurface scattering
is more pronounced in certain regions (e.g., with light gradient change), we propose an adaptive sampling
method based on temporal variance to lower the required number of samples. We propose a one phase
adaptive sampling pass that is unbiased, and able to adapt to scene changes due to motion and lighting.
To further improve the quality, we explore temporal reuse with a guiding pass prior to the final temporal
anti-aliasing (TAA) phase that further improves the quality. Our local guiding pass does not constrain the
TAA implementation, and only requires one additional texture to be passed between frames. Our proposed
variance-guided algorithm has the potential to make stochastic sampling algorithm effective for real-time
rendering.&lt;/p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Post 2: Add Volumetric Material Support</title>
      <link>https://ThisIsTian.github.io/post/add-volumetric-material-support/</link>
      <pubDate>Sun, 06 Jan 2019 08:48:15 -0800</pubDate>
      <author>xtiant1@gmail.com (Tiantian Xie)</author>
      <guid>https://ThisIsTian.github.io/post/add-volumetric-material-support/</guid>
      <description>Introduction Volume objects are a good fit for ATAA, because high luminance variance can be introduced by 1) randomization of ray marching start position to mitigate slicing effect, and 2) object motions that create blurry and ghosting effects within the volume object. If we replace those high variance pixels with correct tracing pixels, volume objects can be perfect rendered without any artifacts. The big picture above illustrates this point. In this post, I will show how I added correct ATAA support to custom volumetric material within the path tracer created in the last post.</description>
    </item>
    
    <item>
      <title>Post 1: Add ATAA Into UE4</title>
      <link>https://ThisIsTian.github.io/post/add-ataa-into-ue4/</link>
      <pubDate>Sun, 06 Jan 2019 08:45:22 -0800</pubDate>
      <author>xtiant1@gmail.com (Tiantian Xie)</author>
      <guid>https://ThisIsTian.github.io/post/add-ataa-into-ue4/</guid>
      <description>The original paper adaptive temporal antialiasing by Adam Marrs et al. introduced how ATAA can be implemented with RTX in a summary. In this post, the focus is on the technique and problems I came across when adding ATAA to UE4 in a course project without RTX.
Segmentation The first step to implement ATAA is to classify pixel types and record history information. In the paper, the pixel types include: FXAA, TAA, ATAA.</description>
    </item>
    
    <item>
      <title>Adaptive Temporal Antialiasing Without RTX</title>
      <link>https://ThisIsTian.github.io/post/adaptive-temporal-antialiasing-without-rtx/</link>
      <pubDate>Sun, 06 Jan 2019 00:05:14 -0800</pubDate>
      <author>xtiant1@gmail.com (Tiantian Xie)</author>
      <guid>https://ThisIsTian.github.io/post/adaptive-temporal-antialiasing-without-rtx/</guid>
      <description>Introduction TL;DR - I was working on volumetric data in UE4 before starting this project. The rendering was a little burry when the camera moved. However, it was fine at that time because only static screenshots were needed. Anyhow, it got my attention. So, for the course project for the graphics for games class instructed by Dr. Marc Olano, I tried to implement adaptive temporal antialiasing (ATAA) in UE4 4.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://ThisIsTian.github.io/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>xtiant1@gmail.com (Tiantian Xie)</author>
      <guid>https://ThisIsTian.github.io/page/about/</guid>
      <description>My name is Tiantian, a Ph.D. student who is interested in Real-time rendering, Game and Machine/Deep Learning.
If you are interested in the posts or me, feel free to contact me through LinkedIn, Twitter(@ThisIsTian) or email.</description>
    </item>
    
  </channel>
</rss>